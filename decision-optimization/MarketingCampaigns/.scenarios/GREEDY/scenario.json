{"qualifiers":[{"name":"modelType","value":"python"},{"name":"modelMetadata","value":"{\"fileName\":\"model.py\",\"fileContent\":\"import pandas as pd\\r\\n\\r\\noffers = inputs['offers']\\r\\n\\r\\nproducts = [\\\"Savings\\\", \\\"Mortgage\\\", \\\"Pension\\\"]\\r\\n\\r\\n# How much revenue is earned when selling each product\\r\\nproductValue = [200, 300, 400]\\r\\nvalue_per_product = {products[i] : productValue[i] for i in range(len(products))}\\r\\n\\r\\n# Total available budget\\r\\navailableBudget = 25000\\r\\n\\r\\n# For each channel, cost of making a marketing action and success factor\\r\\nchannels =  pd.DataFrame(data=[(\\\"gift\\\", 20.0, 0.20), \\r\\n                               (\\\"newsletter\\\", 15.0, 0.05), \\r\\n                               (\\\"seminar\\\", 23.0, 0.30)], columns=[\\\"name\\\", \\\"cost\\\", \\\"factor\\\"])\\r\\n\\r\\noffersR = range(0, len(offers))\\r\\nproductsR = range(0, len(products))\\r\\nchannelsR = range(0, len(channels))\\r\\n\\r\\n\\r\\ngsol = pd.DataFrame()\\r\\ngsol['id'] = offers['id']\\r\\n\\r\\nbudget = 0\\r\\nrevenue = 0\\r\\n\\r\\nfor product in products:\\r\\n    gsol[product] = 0\\r\\n   \\r\\nnoffers = len(offers)\\r\\n\\r\\n# ensure the 10% per channel by choosing the most promising per channel\\r\\nfor c in channelsR: #, channel in channels.iterrows():\\r\\n    i = 0;\\r\\n    while (i< ( noffers // 10 ) ):\\r\\n        # find a possible offer in this channel for a customer not yet done\\r\\n        added = False\\r\\n        for o  in offersR:\\r\\n            already = False\\r\\n            for product in products:   \\r\\n                if gsol.get_value(index=o, col=product) == 1:\\r\\n                    already = True\\r\\n                    break\\r\\n            if already:\\r\\n                continue\\r\\n            possible = False\\r\\n            possibleProduct = None\\r\\n            for product in products:\\r\\n                if offers.get_value(index=o, col=product) == 1:\\r\\n                    possible = True\\r\\n                    possibleProduct = product\\r\\n                    break\\r\\n            if not possible:\\r\\n                continue\\r\\n            #print \\\"Assigning customer \\\", offers.get_value(index=o, col=\\\"id\\\"), \\\" with product \\\", product, \\\" and channel \\\", channel['name']\\r\\n            gsol.set_value(index=o, col=possibleProduct, value=1)\\r\\n            i = i+1\\r\\n            added = True\\r\\n            budget = budget + channels.get_value(index=c, col=\\\"cost\\\")\\r\\n            revenue = revenue + channels.get_value(index=c, col=\\\"factor\\\")*value_per_product[product]            \\r\\n            break\\r\\n        if not added:\\r\\n            print(\\\"NOT FEASIBLE\\\")\\r\\n            break\\r\\n\\t\\t\\t\\r\\n# add more to complete budget       \\r\\nwhile (True):\\r\\n    added = False\\r\\n    for c, channel in channels.iterrows():\\r\\n        if (budget + channel.cost > availableBudget):\\r\\n            continue\\r\\n        # find a possible offer in this channel for a customer not yet done\\r\\n        for o  in offersR:\\r\\n            already = False\\r\\n            for product in products:   \\r\\n                if gsol.get_value(index=o, col=product) == 1:\\r\\n                    already = True\\r\\n                    break\\r\\n            if already:\\r\\n                continue\\r\\n            possible = False\\r\\n            possibleProduct = None\\r\\n            for product in products:\\r\\n                if offers.get_value(index=o, col=product) == 1:\\r\\n                    possible = True\\r\\n                    possibleProduct = product\\r\\n                    break\\r\\n            if not possible:\\r\\n                continue\\r\\n            #print \\\"Assigning customer \\\", offers.get_value(index=o, col=\\\"id\\\"), \\\" with product \\\", product, \\\" and channel \\\", channel['name']\\r\\n            gsol.set_value(index=o, col=possibleProduct, value=1)\\r\\n            i = i+1\\r\\n            added = True\\r\\n            budget = budget + channel.cost\\r\\n            revenue = revenue + channel.factor*value_per_product[product]            \\r\\n            break\\r\\n    if not added:\\r\\n        print(\\\"FINISH BUDGET\\\")\\r\\n        break\\r\\n    \\r\\nprint(gsol.head())\\t\\t\\t\\r\\n\\r\\na = gsol[gsol.Mortgage == 1]\\r\\nb = gsol[gsol.Pension == 1]\\r\\nc = gsol[gsol.Savings == 1]\\r\\n\\r\\nabc = gsol[(gsol.Mortgage == 1) | (gsol.Pension == 1) | (gsol.Savings == 1)]\\r\\n\\r\\nprint(\\\"Number of clients: %d\\\" %len(abc))\\r\\nprint(\\\"Numbers of Mortgage offers: %d\\\" %len(a))\\r\\nprint(\\\"Numbers of Pension offers: %d\\\" %len(b))\\r\\nprint(\\\"Numbers of Savings offers: %d\\\" %len(c))\\r\\nprint(\\\"Total Budget Spent: %d\\\" %budget)\\r\\nprint(\\\"Total revenue: %d\\\" %revenue)\\r\\n\\r\\ndata_kpis = [['Offers', len(abc)], ['Mortgage', len(a)], ['Pension', len(b)], ['Savings', len(c)], ['BudgetSpent', budget], ['Revenue', revenue]]\\r\\n\\r\\ndf_kpis = pd.DataFrame(columns=['kpi', 'value'], data=data_kpis)\\r\\n\\r\\noutputs['kpis'] = df_kpis\\r\\noutputs['solution'] = gsol\\r\\n\",\"lastUploadTime\":1523449374237}"}],"parentId":"MarketingCampaigns","category":"scenario","creator":"alain","createdAt":1523449205957,"usage":{"lastModificationTime":1523449404205,"lastModifier":"alain"},"dataUsagePerCategory":{"input":{"lastModificationTime":1523449215626,"lastModifier":"alain"},"model":{"lastModificationTime":1523449372528,"lastModifier":"alain"},"output":{"lastModificationTime":1523449404205,"lastModifier":"alain"}},"state":"available","tables":[{"tableType":{"columns":[{"key":"row","dataType":"Number"},{"key":"age","dataType":"Number"},{"key":"income","dataType":"Number"},{"key":"members_in_household","dataType":"Number"},{"key":"loan_accounts","dataType":"Number"},{"key":"Savings","dataType":"Number"},{"key":"Mortgage","dataType":"Number"},{"key":"Pension","dataType":"Number"},{"key":"id","dataType":"Number"}]},"name":"offers","category":"input","lineage":"Copied from offers.csv","numberOfRows":2756,"creator":"alain","createdAt":1523449215446,"lastUpdater":"alain","updatedAt":1523449215626,"path":"../../../../datasets/offers.csv"},{"tableType":{"columns":[{"key":"id","dataType":"Number"},{"key":"Savings","dataType":"Number"},{"key":"Mortgage","dataType":"Number"},{"key":"Pension","dataType":"Number"}]},"name":"solution","category":"output","numberOfRows":2756,"creator":"alain","createdAt":1523449404131,"lastUpdater":"alain","updatedAt":1523449404131,"path":"solution.csv"},{"tableType":{"columns":[{"key":"kpi","dataType":"String"},{"key":"value","dataType":"Number"}]},"name":"kpis","category":"output","numberOfRows":6,"creator":"alain","createdAt":1523449404205,"lastUpdater":"alain","updatedAt":1523449404205,"path":"kpis.csv"}],"assets":[{"name":"model.py","category":"model","creator":"alain","createdAt":1523449372528,"lastUpdater":"alain","updatedAt":1523449372528,"contentType":"application/json","path":"model.py"},{"name":"log.txt","category":"output","creator":"alain","createdAt":1523449404044,"lastUpdater":"alain","updatedAt":1523449404044,"path":"log.txt"}]}