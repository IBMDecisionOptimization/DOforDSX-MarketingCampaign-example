{"qualifiers":[{"name":"modelType","value":"python"},{"name":"modelMetadata","value":"{\"fileName\":\"model.py\",\"fileContent\":\"import pandas as pd\\r\\n\\r\\noffers = inputs['offers']\\r\\n\\r\\nproducts = [\\\"Savings\\\", \\\"Mortgage\\\", \\\"Pension\\\"]\\r\\n\\r\\n# How much revenue is earned when selling each product\\r\\nproductValue = [200, 300, 400]\\r\\nvalue_per_product = {products[i] : productValue[i] for i in range(len(products))}\\r\\n\\r\\n# Total available budget\\r\\navailableBudget = 25000\\r\\n\\r\\n# For each channel, cost of making a marketing action and success factor\\r\\nchannels =  pd.DataFrame(data=[(\\\"gift\\\", 20.0, 0.20), \\r\\n                               (\\\"newsletter\\\", 15.0, 0.05), \\r\\n                               (\\\"seminar\\\", 23.0, 0.30)], columns=[\\\"name\\\", \\\"cost\\\", \\\"factor\\\"])\\r\\n\\r\\noffersR = range(0, len(offers))\\r\\nproductsR = range(0, len(products))\\r\\nchannelsR = range(0, len(channels))\\r\\n\\r\\nimport sys\\r\\nimport docplex.mp\\r\\n\\r\\nfrom docplex.mp.model import Model\\r\\n\\r\\nmdl = Model(name=\\\"marketing_campaign\\\", checker='on')\\r\\n\\r\\n\\r\\nchannelVars = mdl.binary_var_cube(offersR, productsR, channelsR)\\r\\n\\r\\n# At most 1 product is offered to each customer\\r\\nmdl.add_constraints( mdl.sum(channelVars[o,p,c] for p in productsR for c in channelsR) <=1\\r\\n                   for o in offersR)\\r\\n\\r\\n# Do not exceed the budget\\r\\nmdl.add_constraint( mdl.sum(channelVars[o,p,c]*channels.get_value(index=c, col=\\\"cost\\\") \\r\\n                                           for o in offersR \\r\\n                                           for p in productsR \\r\\n                                           for c in channelsR)  <= availableBudget, \\\"budget\\\")  \\r\\n\\r\\n# At least 10% offers per channel\\r\\nfor c in channelsR:\\r\\n    mdl.add_constraint(mdl.sum(channelVars[o,p,c] for p in productsR for o in offersR) >= len(offers) // 10)\\r\\n\\r\\nmdl.print_information()\\r\\n\\r\\nobj = 0\\r\\n\\r\\nfor c in channelsR:\\r\\n    for p in productsR:\\r\\n        product=products[p]\\r\\n        coef = channels.get_value(index=c, col=\\\"factor\\\") * value_per_product[product]\\r\\n        obj += mdl.sum(channelVars[o,p,c] * coef* offers.get_value(index=o, col=product) for o in offersR)\\r\\n\\r\\nmdl.maximize(obj)\\r\\n\\r\\nmdl.parameters.timelimit = 30\\r\\n\\r\\ns = mdl.solve()\\r\\nassert s, \\\"No Solution !!!\\\"\\r\\n\\r\\nprint(mdl.get_solve_status())\\r\\nprint(mdl.get_solve_details())\\r\\n\\r\\ntotaloffers = mdl.sum(channelVars[o,p,c] \\r\\n                      for o in offersR\\r\\n                      for p in productsR \\r\\n                      for c in channelsR)\\r\\nmdl.add_kpi(totaloffers, \\\"nb_offers\\\")\\r\\n\\r\\nbudgetSpent = mdl.sum(channelVars[o,p,c]*channels.get_value(index=c, col=\\\"cost\\\") \\r\\n                                           for o in offersR \\r\\n                                           for p in productsR \\r\\n                                           for c in channelsR)\\r\\nmdl.add_kpi(budgetSpent, \\\"budgetSpent\\\")\\r\\n\\r\\nfor c in channelsR:\\r\\n    channel = channels.get_value(index=c, col=\\\"name\\\")\\r\\n    kpi = mdl.sum(channelVars[o,p,c] for p in productsR for o in offersR)\\r\\n    mdl.add_kpi(kpi, channel)\\r\\n\\r\\nfor p in productsR:\\r\\n    product = products[p]\\r\\n    kpi = mdl.sum(channelVars[o,p,c] for c in channelsR for o in offersR)\\r\\n    mdl.add_kpi(kpi, product)\\r\\n\\t\\r\\nmdl.report()\\r\\n\\r\\n\\r\\n\\r\\ndata_kpis = [['Offers', mdl.kpi_value_by_name('nb_offers')], \\r\\n\\t\\t['Mortgage', mdl.kpi_value_by_name('Mortgage')], \\r\\n\\t\\t['Pension', mdl.kpi_value_by_name('Pension')], \\r\\n\\t\\t['Savings', mdl.kpi_value_by_name('Savings')], \\r\\n\\t\\t['BudgetSpent', mdl.kpi_value_by_name('budgetSpent')], \\r\\n\\t\\t['Revenue', mdl.objective_value]]\\r\\n\\r\\ndf_kpis = pd.DataFrame(columns=['kpi', 'value'], data=data_kpis)\\r\\n\\r\\noutputs['kpis'] = df_kpis\",\"lastUploadTime\":1523449473458}"}],"parentId":"MarketingCampaigns","category":"scenario","creator":"alain","createdAt":1523449205957,"usage":{"lastModificationTime":1523449478980,"lastModifier":"alain"},"dataUsagePerCategory":{"input":{"lastModificationTime":1523449215626,"lastModifier":"alain"},"model":{"lastModificationTime":1523449471751,"lastModifier":"alain"},"output":{"lastModificationTime":1523449478980,"lastModifier":"alain"}},"state":"available","tables":[{"tableType":{"columns":[{"key":"row","dataType":"Number"},{"key":"age","dataType":"Number"},{"key":"income","dataType":"Number"},{"key":"members_in_household","dataType":"Number"},{"key":"loan_accounts","dataType":"Number"},{"key":"Savings","dataType":"Number"},{"key":"Mortgage","dataType":"Number"},{"key":"Pension","dataType":"Number"},{"key":"id","dataType":"Number"}]},"name":"offers","category":"input","lineage":"Copied from offers.csv","numberOfRows":2756,"creator":"alain","createdAt":1523449215446,"lastUpdater":"alain","updatedAt":1523449215626,"path":"../../../../datasets/offers.csv"},{"tableType":{"columns":[{"key":"kpi","dataType":"String"},{"key":"value","dataType":"Number"}]},"name":"kpis","category":"output","numberOfRows":6,"creator":"alain","createdAt":1523449478980,"lastUpdater":"alain","updatedAt":1523449478980,"path":"kpis.csv"}],"assets":[{"name":"model.py","category":"model","creator":"alain","createdAt":1523449471751,"lastUpdater":"alain","updatedAt":1523449471751,"contentType":"application/json","path":"model.py"},{"name":"log.txt","category":"output","creator":"alain","createdAt":1523449478898,"lastUpdater":"alain","updatedAt":1523449478899,"path":"log.txt"}]}